
ITI_RC_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a4c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000f6c  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000612  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 dd 04 	call	0x9ba	; 0x9ba <main>
  64:	0c 94 24 05 	jmp	0xa48	; 0xa48 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DCMOTOR_voidInit>:
#include "DCMOTOR_private.h"
#include "DCMOTOR_config.h"                                                                                                                                                            #define F_CPU 8000000UL


void DCMOTOR_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection( Transistor_Port, Transistor_B1_B2,DIO_u8PIN_OUTPUT);
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	61 e0       	ldi	r22, 0x01	; 1
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection( Transistor_Port, Transistor_B0_B3,DIO_u8PIN_OUTPUT);
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection( Transistor_Port, Transistor_B4_B7,DIO_u8PIN_OUTPUT);
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	62 e0       	ldi	r22, 0x02	; 2
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection( Transistor_Port, Transistor_B5_B6,DIO_u8PIN_OUTPUT);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_u8SetPinDirection>
}
  9c:	cf 91       	pop	r28
  9e:	df 91       	pop	r29
  a0:	08 95       	ret

000000a2 <DCMOTOR_voidClockWise>:

void DCMOTOR_voidClockWise(void)
{         
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue (Transistor_Port,Transistor_B0_B3 , DIO_u8PIN_HIGH);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Transistor_Port,Transistor_B1_B2 , DIO_u8PIN_LOW);
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B4_B7 , DIO_u8PIN_LOW);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	62 e0       	ldi	r22, 0x02	; 2
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Transistor_Port,Transistor_B5_B6 , DIO_u8PIN_HIGH);
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	63 e0       	ldi	r22, 0x03	; 3
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>

}
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <DCMOTOR_voidStopMotor>:
void DCMOTOR_voidStopMotor(void)
{
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue (Transistor_Port,Transistor_B0_B3 , DIO_u8PIN_LOW);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B1_B2, DIO_u8PIN_LOW);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B4_B7 , DIO_u8PIN_LOW);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B5_B6, DIO_u8PIN_LOW);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	63 e0       	ldi	r22, 0x03	; 3
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
}
 108:	cf 91       	pop	r28
 10a:	df 91       	pop	r29
 10c:	08 95       	ret

0000010e <DCMOTOR_voidCounterClockWise>:
void DCMOTOR_voidCounterClockWise(void)
{
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPinValue (Transistor_Port,Transistor_B0_B3 , DIO_u8PIN_LOW);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B1_B2 , DIO_u8PIN_HIGH);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B4_B7 , DIO_u8PIN_HIGH);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B5_B6 , DIO_u8PIN_LOW);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
}
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	08 95       	ret

00000144 <DCMOTOR_voidRightClockWise>:
void DCMOTOR_voidRightClockWise(void)
{
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue (Transistor_Port,Transistor_B0_B3 , DIO_u8PIN_HIGH);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B1_B2 , DIO_u8PIN_LOW);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B4_B7 , DIO_u8PIN_LOW);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	62 e0       	ldi	r22, 0x02	; 2
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B5_B6 , DIO_u8PIN_LOW);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
}
 174:	cf 91       	pop	r28
 176:	df 91       	pop	r29
 178:	08 95       	ret

0000017a <DCMOTOR_voidRightCounterClockWise>:
void DCMOTOR_voidRightCounterClockWise(void)
{
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
	    DIO_u8SetPinValue (Transistor_Port,Transistor_B0_B3 , DIO_u8PIN_LOW);
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue (Transistor_Port,Transistor_B1_B2 , DIO_u8PIN_HIGH);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue (Transistor_Port,Transistor_B4_B7 , DIO_u8PIN_LOW);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue (Transistor_Port,Transistor_B5_B6 , DIO_u8PIN_LOW);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
}
 1aa:	cf 91       	pop	r28
 1ac:	df 91       	pop	r29
 1ae:	08 95       	ret

000001b0 <DCMOTOR_voidLeftClockWise>:
void DCMOTOR_voidLeftClockWise(void)
{
 1b0:	df 93       	push	r29
 1b2:	cf 93       	push	r28
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
	        DIO_u8SetPinValue (Transistor_Port,Transistor_B0_B3 , DIO_u8PIN_LOW);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
			DIO_u8SetPinValue (Transistor_Port,Transistor_B1_B2 , DIO_u8PIN_LOW);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
			DIO_u8SetPinValue (Transistor_Port,Transistor_B4_B7 , DIO_u8PIN_LOW);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
			DIO_u8SetPinValue (Transistor_Port,Transistor_B5_B6 , DIO_u8PIN_HIGH);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	63 e0       	ldi	r22, 0x03	; 3
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
}
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <DCMOTOR_voidLeftCounterClockWise>:
void DCMOTOR_voidLeftCounterClockWise(void)
{
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue (Transistor_Port,Transistor_B0_B3 , DIO_u8PIN_LOW);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B1_B2 , DIO_u8PIN_LOW);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B4_B7 , DIO_u8PIN_HIGH);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue (Transistor_Port,Transistor_B5_B6 , DIO_u8PIN_LOW);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	63 e0       	ldi	r22, 0x03	; 3
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_u8SetPinValue>
}
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	08 95       	ret

0000021c <DIO_u8SetPinDirection>:
#include "DIO_Register.h"
#include "DIO_Private.h" 
#include "DIO_Config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{   
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	28 97       	sbiw	r28, 0x08	; 8
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	8a 83       	std	Y+2, r24	; 0x02
 232:	6b 83       	std	Y+3, r22	; 0x03
 234:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState = 0;
 236:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7 )
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	88 30       	cpi	r24, 0x08	; 8
 23c:	08 f0       	brcs	.+2      	; 0x240 <DIO_u8SetPinDirection+0x24>
 23e:	e5 c0       	rjmp	.+458    	; 0x40a <DIO_u8SetPinDirection+0x1ee>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
 240:	8c 81       	ldd	r24, Y+4	; 0x04
 242:	88 23       	and	r24, r24
 244:	09 f0       	breq	.+2      	; 0x248 <DIO_u8SetPinDirection+0x2c>
 246:	6f c0       	rjmp	.+222    	; 0x326 <DIO_u8SetPinDirection+0x10a>
		{
			switch(Copy_u8Port)
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	28 2f       	mov	r18, r24
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	38 87       	std	Y+8, r19	; 0x08
 250:	2f 83       	std	Y+7, r18	; 0x07
 252:	8f 81       	ldd	r24, Y+7	; 0x07
 254:	98 85       	ldd	r25, Y+8	; 0x08
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	91 05       	cpc	r25, r1
 25a:	41 f1       	breq	.+80     	; 0x2ac <DIO_u8SetPinDirection+0x90>
 25c:	2f 81       	ldd	r18, Y+7	; 0x07
 25e:	38 85       	ldd	r19, Y+8	; 0x08
 260:	22 30       	cpi	r18, 0x02	; 2
 262:	31 05       	cpc	r19, r1
 264:	2c f4       	brge	.+10     	; 0x270 <DIO_u8SetPinDirection+0x54>
 266:	8f 81       	ldd	r24, Y+7	; 0x07
 268:	98 85       	ldd	r25, Y+8	; 0x08
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	61 f0       	breq	.+24     	; 0x286 <DIO_u8SetPinDirection+0x6a>
 26e:	58 c0       	rjmp	.+176    	; 0x320 <DIO_u8SetPinDirection+0x104>
 270:	2f 81       	ldd	r18, Y+7	; 0x07
 272:	38 85       	ldd	r19, Y+8	; 0x08
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	31 05       	cpc	r19, r1
 278:	61 f1       	breq	.+88     	; 0x2d2 <DIO_u8SetPinDirection+0xb6>
 27a:	8f 81       	ldd	r24, Y+7	; 0x07
 27c:	98 85       	ldd	r25, Y+8	; 0x08
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	91 05       	cpc	r25, r1
 282:	d1 f1       	breq	.+116    	; 0x2f8 <DIO_u8SetPinDirection+0xdc>
 284:	4d c0       	rjmp	.+154    	; 0x320 <DIO_u8SetPinDirection+0x104>
			{
				case DIO_u8PORTA: CLR_BIT(DDRA, Copy_u8Pin);
 286:	aa e3       	ldi	r26, 0x3A	; 58
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	ea e3       	ldi	r30, 0x3A	; 58
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	48 2f       	mov	r20, r24
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8SetPinDirection+0x86>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	2a 95       	dec	r18
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8SetPinDirection+0x82>
 2a6:	80 95       	com	r24
 2a8:	84 23       	and	r24, r20
 2aa:	8c 93       	st	X, r24
				case DIO_u8PORTB: CLR_BIT(DDRB, Copy_u8Pin);
 2ac:	a7 e3       	ldi	r26, 0x37	; 55
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	e7 e3       	ldi	r30, 0x37	; 55
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	48 2f       	mov	r20, r24
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8SetPinDirection+0xac>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	2a 95       	dec	r18
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8SetPinDirection+0xa8>
 2cc:	80 95       	com	r24
 2ce:	84 23       	and	r24, r20
 2d0:	8c 93       	st	X, r24
				case DIO_u8PORTC: CLR_BIT(DDRC, Copy_u8Pin);
 2d2:	a4 e3       	ldi	r26, 0x34	; 52
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	e4 e3       	ldi	r30, 0x34	; 52
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	48 2f       	mov	r20, r24
 2de:	8b 81       	ldd	r24, Y+3	; 0x03
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_u8SetPinDirection+0xd2>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	2a 95       	dec	r18
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_u8SetPinDirection+0xce>
 2f2:	80 95       	com	r24
 2f4:	84 23       	and	r24, r20
 2f6:	8c 93       	st	X, r24
				case DIO_u8PORTD: CLR_BIT(DDRD, Copy_u8Pin);
 2f8:	a1 e3       	ldi	r26, 0x31	; 49
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	e1 e3       	ldi	r30, 0x31	; 49
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	48 2f       	mov	r20, r24
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	28 2f       	mov	r18, r24
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 2e       	mov	r0, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_u8SetPinDirection+0xfa>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_u8SetPinDirection+0xf6>
 31a:	80 95       	com	r24
 31c:	84 23       	and	r24, r20
 31e:	8c 93       	st	X, r24
				default: Local_u8ErrorState = 1;break;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	89 83       	std	Y+1, r24	; 0x01
 324:	74 c0       	rjmp	.+232    	; 0x40e <DIO_u8SetPinDirection+0x1f2>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
 326:	8c 81       	ldd	r24, Y+4	; 0x04
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	09 f0       	breq	.+2      	; 0x32e <DIO_u8SetPinDirection+0x112>
 32c:	6b c0       	rjmp	.+214    	; 0x404 <DIO_u8SetPinDirection+0x1e8>
		{
			switch(Copy_u8Port)
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	3e 83       	std	Y+6, r19	; 0x06
 336:	2d 83       	std	Y+5, r18	; 0x05
 338:	8d 81       	ldd	r24, Y+5	; 0x05
 33a:	9e 81       	ldd	r25, Y+6	; 0x06
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	91 05       	cpc	r25, r1
 340:	39 f1       	breq	.+78     	; 0x390 <DIO_u8SetPinDirection+0x174>
 342:	2d 81       	ldd	r18, Y+5	; 0x05
 344:	3e 81       	ldd	r19, Y+6	; 0x06
 346:	22 30       	cpi	r18, 0x02	; 2
 348:	31 05       	cpc	r19, r1
 34a:	2c f4       	brge	.+10     	; 0x356 <DIO_u8SetPinDirection+0x13a>
 34c:	8d 81       	ldd	r24, Y+5	; 0x05
 34e:	9e 81       	ldd	r25, Y+6	; 0x06
 350:	00 97       	sbiw	r24, 0x00	; 0
 352:	61 f0       	breq	.+24     	; 0x36c <DIO_u8SetPinDirection+0x150>
 354:	54 c0       	rjmp	.+168    	; 0x3fe <DIO_u8SetPinDirection+0x1e2>
 356:	2d 81       	ldd	r18, Y+5	; 0x05
 358:	3e 81       	ldd	r19, Y+6	; 0x06
 35a:	22 30       	cpi	r18, 0x02	; 2
 35c:	31 05       	cpc	r19, r1
 35e:	51 f1       	breq	.+84     	; 0x3b4 <DIO_u8SetPinDirection+0x198>
 360:	8d 81       	ldd	r24, Y+5	; 0x05
 362:	9e 81       	ldd	r25, Y+6	; 0x06
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	91 05       	cpc	r25, r1
 368:	b9 f1       	breq	.+110    	; 0x3d8 <DIO_u8SetPinDirection+0x1bc>
 36a:	49 c0       	rjmp	.+146    	; 0x3fe <DIO_u8SetPinDirection+0x1e2>
			{
				case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8Pin);
 36c:	aa e3       	ldi	r26, 0x3A	; 58
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	ea e3       	ldi	r30, 0x3A	; 58
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	48 2f       	mov	r20, r24
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_u8SetPinDirection+0x16c>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	2a 95       	dec	r18
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_u8SetPinDirection+0x168>
 38c:	84 2b       	or	r24, r20
 38e:	8c 93       	st	X, r24
				case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8Pin);
 390:	a7 e3       	ldi	r26, 0x37	; 55
 392:	b0 e0       	ldi	r27, 0x00	; 0
 394:	e7 e3       	ldi	r30, 0x37	; 55
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	48 2f       	mov	r20, r24
 39c:	8b 81       	ldd	r24, Y+3	; 0x03
 39e:	28 2f       	mov	r18, r24
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_u8SetPinDirection+0x190>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	2a 95       	dec	r18
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_u8SetPinDirection+0x18c>
 3b0:	84 2b       	or	r24, r20
 3b2:	8c 93       	st	X, r24
				case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8Pin);
 3b4:	a4 e3       	ldi	r26, 0x34	; 52
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	e4 e3       	ldi	r30, 0x34	; 52
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	48 2f       	mov	r20, r24
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8SetPinDirection+0x1b4>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	2a 95       	dec	r18
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8SetPinDirection+0x1b0>
 3d4:	84 2b       	or	r24, r20
 3d6:	8c 93       	st	X, r24
				case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8Pin);
 3d8:	a1 e3       	ldi	r26, 0x31	; 49
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	e1 e3       	ldi	r30, 0x31	; 49
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	48 2f       	mov	r20, r24
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 2e       	mov	r0, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_u8SetPinDirection+0x1da>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	0a 94       	dec	r0
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_u8SetPinDirection+0x1d6>
 3fa:	84 2b       	or	r24, r20
 3fc:	8c 93       	st	X, r24
				default: Local_u8ErrorState = 1;break;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	89 83       	std	Y+1, r24	; 0x01
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_u8SetPinDirection+0x1f2>
			}
		}
		else
	    {
		   Local_u8ErrorState = 1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_u8SetPinDirection+0x1f2>
	    }
	}
	else
	{
		Local_u8ErrorState = 1;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
 40e:	89 81       	ldd	r24, Y+1	; 0x01
}
 410:	28 96       	adiw	r28, 0x08	; 8
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
 41c:	cf 91       	pop	r28
 41e:	df 91       	pop	r29
 420:	08 95       	ret

00000422 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 422:	df 93       	push	r29
 424:	cf 93       	push	r28
 426:	00 d0       	rcall	.+0      	; 0x428 <DIO_u8SetPortDirection+0x6>
 428:	00 d0       	rcall	.+0      	; 0x42a <DIO_u8SetPortDirection+0x8>
 42a:	0f 92       	push	r0
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	8a 83       	std	Y+2, r24	; 0x02
 432:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
 434:	19 82       	std	Y+1, r1	; 0x01
			switch(Copy_u8Port)
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	3d 83       	std	Y+5, r19	; 0x05
 43e:	2c 83       	std	Y+4, r18	; 0x04
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	9d 81       	ldd	r25, Y+5	; 0x05
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	91 05       	cpc	r25, r1
 448:	d1 f0       	breq	.+52     	; 0x47e <DIO_u8SetPortDirection+0x5c>
 44a:	2c 81       	ldd	r18, Y+4	; 0x04
 44c:	3d 81       	ldd	r19, Y+5	; 0x05
 44e:	22 30       	cpi	r18, 0x02	; 2
 450:	31 05       	cpc	r19, r1
 452:	2c f4       	brge	.+10     	; 0x45e <DIO_u8SetPortDirection+0x3c>
 454:	8c 81       	ldd	r24, Y+4	; 0x04
 456:	9d 81       	ldd	r25, Y+5	; 0x05
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	61 f0       	breq	.+24     	; 0x474 <DIO_u8SetPortDirection+0x52>
 45c:	1f c0       	rjmp	.+62     	; 0x49c <DIO_u8SetPortDirection+0x7a>
 45e:	2c 81       	ldd	r18, Y+4	; 0x04
 460:	3d 81       	ldd	r19, Y+5	; 0x05
 462:	22 30       	cpi	r18, 0x02	; 2
 464:	31 05       	cpc	r19, r1
 466:	81 f0       	breq	.+32     	; 0x488 <DIO_u8SetPortDirection+0x66>
 468:	8c 81       	ldd	r24, Y+4	; 0x04
 46a:	9d 81       	ldd	r25, Y+5	; 0x05
 46c:	83 30       	cpi	r24, 0x03	; 3
 46e:	91 05       	cpc	r25, r1
 470:	81 f0       	breq	.+32     	; 0x492 <DIO_u8SetPortDirection+0x70>
 472:	14 c0       	rjmp	.+40     	; 0x49c <DIO_u8SetPortDirection+0x7a>
			{
				case DIO_u8PORTA: DDRA = Copy_u8Direction;break;
 474:	ea e3       	ldi	r30, 0x3A	; 58
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	80 83       	st	Z, r24
 47c:	11 c0       	rjmp	.+34     	; 0x4a0 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTB: DDRB = Copy_u8Direction;break;
 47e:	e7 e3       	ldi	r30, 0x37	; 55
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	80 83       	st	Z, r24
 486:	0c c0       	rjmp	.+24     	; 0x4a0 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTC: DDRC = Copy_u8Direction;break;
 488:	e4 e3       	ldi	r30, 0x34	; 52
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	80 83       	st	Z, r24
 490:	07 c0       	rjmp	.+14     	; 0x4a0 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTD: DDRD = Copy_u8Direction;break;
 492:	e1 e3       	ldi	r30, 0x31	; 49
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	80 83       	st	Z, r24
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_u8SetPortDirection+0x7e>
				default: Local_u8ErrorState = 1;break;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	89 83       	std	Y+1, r24	; 0x01
			}
		
	 return Local_u8ErrorState;
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
}
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	cf 91       	pop	r28
 4ae:	df 91       	pop	r29
 4b0:	08 95       	ret

000004b2 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 4b2:	df 93       	push	r29
 4b4:	cf 93       	push	r28
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	28 97       	sbiw	r28, 0x08	; 8
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	8a 83       	std	Y+2, r24	; 0x02
 4c8:	6b 83       	std	Y+3, r22	; 0x03
 4ca:	4c 83       	std	Y+4, r20	; 0x04
	 u8 Local_u8ErrorState = 0;
 4cc:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_u8Pin <= DIO_u8PIN7 )
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	88 30       	cpi	r24, 0x08	; 8
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <DIO_u8SetPinValue+0x24>
 4d4:	e5 c0       	rjmp	.+458    	; 0x6a0 <DIO_u8SetPinValue+0x1ee>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
 4d6:	8c 81       	ldd	r24, Y+4	; 0x04
 4d8:	88 23       	and	r24, r24
 4da:	09 f0       	breq	.+2      	; 0x4de <DIO_u8SetPinValue+0x2c>
 4dc:	6f c0       	rjmp	.+222    	; 0x5bc <DIO_u8SetPinValue+0x10a>
		{
			switch(Copy_u8Port)
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	38 87       	std	Y+8, r19	; 0x08
 4e6:	2f 83       	std	Y+7, r18	; 0x07
 4e8:	8f 81       	ldd	r24, Y+7	; 0x07
 4ea:	98 85       	ldd	r25, Y+8	; 0x08
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	91 05       	cpc	r25, r1
 4f0:	41 f1       	breq	.+80     	; 0x542 <DIO_u8SetPinValue+0x90>
 4f2:	2f 81       	ldd	r18, Y+7	; 0x07
 4f4:	38 85       	ldd	r19, Y+8	; 0x08
 4f6:	22 30       	cpi	r18, 0x02	; 2
 4f8:	31 05       	cpc	r19, r1
 4fa:	2c f4       	brge	.+10     	; 0x506 <DIO_u8SetPinValue+0x54>
 4fc:	8f 81       	ldd	r24, Y+7	; 0x07
 4fe:	98 85       	ldd	r25, Y+8	; 0x08
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	61 f0       	breq	.+24     	; 0x51c <DIO_u8SetPinValue+0x6a>
 504:	58 c0       	rjmp	.+176    	; 0x5b6 <DIO_u8SetPinValue+0x104>
 506:	2f 81       	ldd	r18, Y+7	; 0x07
 508:	38 85       	ldd	r19, Y+8	; 0x08
 50a:	22 30       	cpi	r18, 0x02	; 2
 50c:	31 05       	cpc	r19, r1
 50e:	61 f1       	breq	.+88     	; 0x568 <DIO_u8SetPinValue+0xb6>
 510:	8f 81       	ldd	r24, Y+7	; 0x07
 512:	98 85       	ldd	r25, Y+8	; 0x08
 514:	83 30       	cpi	r24, 0x03	; 3
 516:	91 05       	cpc	r25, r1
 518:	d1 f1       	breq	.+116    	; 0x58e <DIO_u8SetPinValue+0xdc>
 51a:	4d c0       	rjmp	.+154    	; 0x5b6 <DIO_u8SetPinValue+0x104>
			{
				case DIO_u8PORTA: CLR_BIT(PORTA, Copy_u8Pin);
 51c:	ab e3       	ldi	r26, 0x3B	; 59
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	eb e3       	ldi	r30, 0x3B	; 59
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	48 2f       	mov	r20, r24
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	28 2f       	mov	r18, r24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_u8SetPinValue+0x86>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	2a 95       	dec	r18
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_u8SetPinValue+0x82>
 53c:	80 95       	com	r24
 53e:	84 23       	and	r24, r20
 540:	8c 93       	st	X, r24
				case DIO_u8PORTB: CLR_BIT(PORTB, Copy_u8Pin);
 542:	a8 e3       	ldi	r26, 0x38	; 56
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	e8 e3       	ldi	r30, 0x38	; 56
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	48 2f       	mov	r20, r24
 54e:	8b 81       	ldd	r24, Y+3	; 0x03
 550:	28 2f       	mov	r18, r24
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_u8SetPinValue+0xac>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	2a 95       	dec	r18
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_u8SetPinValue+0xa8>
 562:	80 95       	com	r24
 564:	84 23       	and	r24, r20
 566:	8c 93       	st	X, r24
				case DIO_u8PORTC: CLR_BIT(PORTC, Copy_u8Pin);
 568:	a5 e3       	ldi	r26, 0x35	; 53
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	e5 e3       	ldi	r30, 0x35	; 53
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	48 2f       	mov	r20, r24
 574:	8b 81       	ldd	r24, Y+3	; 0x03
 576:	28 2f       	mov	r18, r24
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_u8SetPinValue+0xd2>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	2a 95       	dec	r18
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_u8SetPinValue+0xce>
 588:	80 95       	com	r24
 58a:	84 23       	and	r24, r20
 58c:	8c 93       	st	X, r24
				case DIO_u8PORTD: CLR_BIT(PORTD, Copy_u8Pin);
 58e:	a2 e3       	ldi	r26, 0x32	; 50
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	e2 e3       	ldi	r30, 0x32	; 50
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	48 2f       	mov	r20, r24
 59a:	8b 81       	ldd	r24, Y+3	; 0x03
 59c:	28 2f       	mov	r18, r24
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 2e       	mov	r0, r18
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_u8SetPinValue+0xfa>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	0a 94       	dec	r0
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_u8SetPinValue+0xf6>
 5b0:	80 95       	com	r24
 5b2:	84 23       	and	r24, r20
 5b4:	8c 93       	st	X, r24
				default: Local_u8ErrorState = 1;break;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	74 c0       	rjmp	.+232    	; 0x6a4 <DIO_u8SetPinValue+0x1f2>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
 5bc:	8c 81       	ldd	r24, Y+4	; 0x04
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <DIO_u8SetPinValue+0x112>
 5c2:	6b c0       	rjmp	.+214    	; 0x69a <DIO_u8SetPinValue+0x1e8>
		{
			switch(Copy_u8Port)
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	3e 83       	std	Y+6, r19	; 0x06
 5cc:	2d 83       	std	Y+5, r18	; 0x05
 5ce:	8d 81       	ldd	r24, Y+5	; 0x05
 5d0:	9e 81       	ldd	r25, Y+6	; 0x06
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	91 05       	cpc	r25, r1
 5d6:	39 f1       	breq	.+78     	; 0x626 <DIO_u8SetPinValue+0x174>
 5d8:	2d 81       	ldd	r18, Y+5	; 0x05
 5da:	3e 81       	ldd	r19, Y+6	; 0x06
 5dc:	22 30       	cpi	r18, 0x02	; 2
 5de:	31 05       	cpc	r19, r1
 5e0:	2c f4       	brge	.+10     	; 0x5ec <DIO_u8SetPinValue+0x13a>
 5e2:	8d 81       	ldd	r24, Y+5	; 0x05
 5e4:	9e 81       	ldd	r25, Y+6	; 0x06
 5e6:	00 97       	sbiw	r24, 0x00	; 0
 5e8:	61 f0       	breq	.+24     	; 0x602 <DIO_u8SetPinValue+0x150>
 5ea:	54 c0       	rjmp	.+168    	; 0x694 <DIO_u8SetPinValue+0x1e2>
 5ec:	2d 81       	ldd	r18, Y+5	; 0x05
 5ee:	3e 81       	ldd	r19, Y+6	; 0x06
 5f0:	22 30       	cpi	r18, 0x02	; 2
 5f2:	31 05       	cpc	r19, r1
 5f4:	51 f1       	breq	.+84     	; 0x64a <DIO_u8SetPinValue+0x198>
 5f6:	8d 81       	ldd	r24, Y+5	; 0x05
 5f8:	9e 81       	ldd	r25, Y+6	; 0x06
 5fa:	83 30       	cpi	r24, 0x03	; 3
 5fc:	91 05       	cpc	r25, r1
 5fe:	b9 f1       	breq	.+110    	; 0x66e <DIO_u8SetPinValue+0x1bc>
 600:	49 c0       	rjmp	.+146    	; 0x694 <DIO_u8SetPinValue+0x1e2>
			{
				case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin);
 602:	ab e3       	ldi	r26, 0x3B	; 59
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	eb e3       	ldi	r30, 0x3B	; 59
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	48 2f       	mov	r20, r24
 60e:	8b 81       	ldd	r24, Y+3	; 0x03
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_u8SetPinValue+0x16c>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	2a 95       	dec	r18
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_u8SetPinValue+0x168>
 622:	84 2b       	or	r24, r20
 624:	8c 93       	st	X, r24
				case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin);
 626:	a8 e3       	ldi	r26, 0x38	; 56
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	e8 e3       	ldi	r30, 0x38	; 56
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	48 2f       	mov	r20, r24
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_u8SetPinValue+0x190>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	2a 95       	dec	r18
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_u8SetPinValue+0x18c>
 646:	84 2b       	or	r24, r20
 648:	8c 93       	st	X, r24
				case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin);
 64a:	a5 e3       	ldi	r26, 0x35	; 53
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	e5 e3       	ldi	r30, 0x35	; 53
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	48 2f       	mov	r20, r24
 656:	8b 81       	ldd	r24, Y+3	; 0x03
 658:	28 2f       	mov	r18, r24
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_u8SetPinValue+0x1b4>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	2a 95       	dec	r18
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_u8SetPinValue+0x1b0>
 66a:	84 2b       	or	r24, r20
 66c:	8c 93       	st	X, r24
				case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin);
 66e:	a2 e3       	ldi	r26, 0x32	; 50
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	e2 e3       	ldi	r30, 0x32	; 50
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	48 2f       	mov	r20, r24
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	28 2f       	mov	r18, r24
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 2e       	mov	r0, r18
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_u8SetPinValue+0x1da>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	0a 94       	dec	r0
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_u8SetPinValue+0x1d6>
 690:	84 2b       	or	r24, r20
 692:	8c 93       	st	X, r24
				default: Local_u8ErrorState = 1;break;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <DIO_u8SetPinValue+0x1f2>
			}
		}
		else
	    {
		   Local_u8ErrorState = 1;
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	89 83       	std	Y+1, r24	; 0x01
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_u8SetPinValue+0x1f2>
	    }
	}
	else
	{
		Local_u8ErrorState = 1;
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	89 83       	std	Y+1, r24	; 0x01
	}
	
	 return Local_u8ErrorState;
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
}
 6a6:	28 96       	adiw	r28, 0x08	; 8
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	f8 94       	cli
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	cd bf       	out	0x3d, r28	; 61
 6b2:	cf 91       	pop	r28
 6b4:	df 91       	pop	r29
 6b6:	08 95       	ret

000006b8 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 6b8:	df 93       	push	r29
 6ba:	cf 93       	push	r28
 6bc:	00 d0       	rcall	.+0      	; 0x6be <DIO_u8SetPortValue+0x6>
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <DIO_u8SetPortValue+0x8>
 6c0:	0f 92       	push	r0
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	8a 83       	std	Y+2, r24	; 0x02
 6c8:	6b 83       	std	Y+3, r22	; 0x03
	 u8 Local_u8ErrorState = 0;
 6ca:	19 82       	std	Y+1, r1	; 0x01
	 switch(Copy_u8Port)
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	28 2f       	mov	r18, r24
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	3d 83       	std	Y+5, r19	; 0x05
 6d4:	2c 83       	std	Y+4, r18	; 0x04
 6d6:	8c 81       	ldd	r24, Y+4	; 0x04
 6d8:	9d 81       	ldd	r25, Y+5	; 0x05
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	91 05       	cpc	r25, r1
 6de:	d1 f0       	breq	.+52     	; 0x714 <DIO_u8SetPortValue+0x5c>
 6e0:	2c 81       	ldd	r18, Y+4	; 0x04
 6e2:	3d 81       	ldd	r19, Y+5	; 0x05
 6e4:	22 30       	cpi	r18, 0x02	; 2
 6e6:	31 05       	cpc	r19, r1
 6e8:	2c f4       	brge	.+10     	; 0x6f4 <DIO_u8SetPortValue+0x3c>
 6ea:	8c 81       	ldd	r24, Y+4	; 0x04
 6ec:	9d 81       	ldd	r25, Y+5	; 0x05
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	61 f0       	breq	.+24     	; 0x70a <DIO_u8SetPortValue+0x52>
 6f2:	1f c0       	rjmp	.+62     	; 0x732 <DIO_u8SetPortValue+0x7a>
 6f4:	2c 81       	ldd	r18, Y+4	; 0x04
 6f6:	3d 81       	ldd	r19, Y+5	; 0x05
 6f8:	22 30       	cpi	r18, 0x02	; 2
 6fa:	31 05       	cpc	r19, r1
 6fc:	81 f0       	breq	.+32     	; 0x71e <DIO_u8SetPortValue+0x66>
 6fe:	8c 81       	ldd	r24, Y+4	; 0x04
 700:	9d 81       	ldd	r25, Y+5	; 0x05
 702:	83 30       	cpi	r24, 0x03	; 3
 704:	91 05       	cpc	r25, r1
 706:	81 f0       	breq	.+32     	; 0x728 <DIO_u8SetPortValue+0x70>
 708:	14 c0       	rjmp	.+40     	; 0x732 <DIO_u8SetPortValue+0x7a>
			{
				case DIO_u8PORTA: PORTA = Copy_u8Value;break;
 70a:	eb e3       	ldi	r30, 0x3B	; 59
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	80 83       	st	Z, r24
 712:	11 c0       	rjmp	.+34     	; 0x736 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTB: PORTB = Copy_u8Value;break;
 714:	e8 e3       	ldi	r30, 0x38	; 56
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	80 83       	st	Z, r24
 71c:	0c c0       	rjmp	.+24     	; 0x736 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTC: PORTC = Copy_u8Value;break;
 71e:	e5 e3       	ldi	r30, 0x35	; 53
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	8b 81       	ldd	r24, Y+3	; 0x03
 724:	80 83       	st	Z, r24
 726:	07 c0       	rjmp	.+14     	; 0x736 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTD: PORTD = Copy_u8Value;break;
 728:	e2 e3       	ldi	r30, 0x32	; 50
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	8b 81       	ldd	r24, Y+3	; 0x03
 72e:	80 83       	st	Z, r24
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_u8SetPortValue+0x7e>
				default: Local_u8ErrorState = 1;break;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	89 83       	std	Y+1, r24	; 0x01
			}
	 return Local_u8ErrorState;
 736:	89 81       	ldd	r24, Y+1	; 0x01
}
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	0f 90       	pop	r0
 742:	cf 91       	pop	r28
 744:	df 91       	pop	r29
 746:	08 95       	ret

00000748 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 748:	df 93       	push	r29
 74a:	cf 93       	push	r28
 74c:	cd b7       	in	r28, 0x3d	; 61
 74e:	de b7       	in	r29, 0x3e	; 62
 750:	27 97       	sbiw	r28, 0x07	; 7
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	8a 83       	std	Y+2, r24	; 0x02
 75e:	6b 83       	std	Y+3, r22	; 0x03
 760:	5d 83       	std	Y+5, r21	; 0x05
 762:	4c 83       	std	Y+4, r20	; 0x04
	 u8 Local_u8ErrorState = 0;
 764:	19 82       	std	Y+1, r1	; 0x01
	 if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
 766:	8c 81       	ldd	r24, Y+4	; 0x04
 768:	9d 81       	ldd	r25, Y+5	; 0x05
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	09 f4       	brne	.+2      	; 0x770 <DIO_u8GetPinValue+0x28>
 76e:	78 c0       	rjmp	.+240    	; 0x860 <__stack+0x1>
 770:	8b 81       	ldd	r24, Y+3	; 0x03
 772:	88 30       	cpi	r24, 0x08	; 8
 774:	08 f0       	brcs	.+2      	; 0x778 <DIO_u8GetPinValue+0x30>
 776:	74 c0       	rjmp	.+232    	; 0x860 <__stack+0x1>
	 {
		 switch(Copy_u8Port)
 778:	8a 81       	ldd	r24, Y+2	; 0x02
 77a:	28 2f       	mov	r18, r24
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	3f 83       	std	Y+7, r19	; 0x07
 780:	2e 83       	std	Y+6, r18	; 0x06
 782:	4e 81       	ldd	r20, Y+6	; 0x06
 784:	5f 81       	ldd	r21, Y+7	; 0x07
 786:	41 30       	cpi	r20, 0x01	; 1
 788:	51 05       	cpc	r21, r1
 78a:	59 f1       	breq	.+86     	; 0x7e2 <DIO_u8GetPinValue+0x9a>
 78c:	8e 81       	ldd	r24, Y+6	; 0x06
 78e:	9f 81       	ldd	r25, Y+7	; 0x07
 790:	82 30       	cpi	r24, 0x02	; 2
 792:	91 05       	cpc	r25, r1
 794:	34 f4       	brge	.+12     	; 0x7a2 <DIO_u8GetPinValue+0x5a>
 796:	2e 81       	ldd	r18, Y+6	; 0x06
 798:	3f 81       	ldd	r19, Y+7	; 0x07
 79a:	21 15       	cp	r18, r1
 79c:	31 05       	cpc	r19, r1
 79e:	69 f0       	breq	.+26     	; 0x7ba <DIO_u8GetPinValue+0x72>
 7a0:	5c c0       	rjmp	.+184    	; 0x85a <DIO_u8GetPinValue+0x112>
 7a2:	4e 81       	ldd	r20, Y+6	; 0x06
 7a4:	5f 81       	ldd	r21, Y+7	; 0x07
 7a6:	42 30       	cpi	r20, 0x02	; 2
 7a8:	51 05       	cpc	r21, r1
 7aa:	79 f1       	breq	.+94     	; 0x80a <DIO_u8GetPinValue+0xc2>
 7ac:	8e 81       	ldd	r24, Y+6	; 0x06
 7ae:	9f 81       	ldd	r25, Y+7	; 0x07
 7b0:	83 30       	cpi	r24, 0x03	; 3
 7b2:	91 05       	cpc	r25, r1
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <DIO_u8GetPinValue+0x70>
 7b6:	3d c0       	rjmp	.+122    	; 0x832 <DIO_u8GetPinValue+0xea>
 7b8:	50 c0       	rjmp	.+160    	; 0x85a <DIO_u8GetPinValue+0x112>
			{
				case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin);break;
 7ba:	e9 e3       	ldi	r30, 0x39	; 57
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	28 2f       	mov	r18, r24
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
 7c6:	88 2f       	mov	r24, r24
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	a9 01       	movw	r20, r18
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_u8GetPinValue+0x8a>
 7ce:	55 95       	asr	r21
 7d0:	47 95       	ror	r20
 7d2:	8a 95       	dec	r24
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_u8GetPinValue+0x86>
 7d6:	ca 01       	movw	r24, r20
 7d8:	81 70       	andi	r24, 0x01	; 1
 7da:	ec 81       	ldd	r30, Y+4	; 0x04
 7dc:	fd 81       	ldd	r31, Y+5	; 0x05
 7de:	80 83       	st	Z, r24
 7e0:	41 c0       	rjmp	.+130    	; 0x864 <__stack+0x5>
				case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin);break;
 7e2:	e6 e3       	ldi	r30, 0x36	; 54
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	80 81       	ld	r24, Z
 7e8:	28 2f       	mov	r18, r24
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	8b 81       	ldd	r24, Y+3	; 0x03
 7ee:	88 2f       	mov	r24, r24
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	a9 01       	movw	r20, r18
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_u8GetPinValue+0xb2>
 7f6:	55 95       	asr	r21
 7f8:	47 95       	ror	r20
 7fa:	8a 95       	dec	r24
 7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_u8GetPinValue+0xae>
 7fe:	ca 01       	movw	r24, r20
 800:	81 70       	andi	r24, 0x01	; 1
 802:	ec 81       	ldd	r30, Y+4	; 0x04
 804:	fd 81       	ldd	r31, Y+5	; 0x05
 806:	80 83       	st	Z, r24
 808:	2d c0       	rjmp	.+90     	; 0x864 <__stack+0x5>
				case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin);break;
 80a:	e3 e3       	ldi	r30, 0x33	; 51
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	28 2f       	mov	r18, r24
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	8b 81       	ldd	r24, Y+3	; 0x03
 816:	88 2f       	mov	r24, r24
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	a9 01       	movw	r20, r18
 81c:	02 c0       	rjmp	.+4      	; 0x822 <DIO_u8GetPinValue+0xda>
 81e:	55 95       	asr	r21
 820:	47 95       	ror	r20
 822:	8a 95       	dec	r24
 824:	e2 f7       	brpl	.-8      	; 0x81e <DIO_u8GetPinValue+0xd6>
 826:	ca 01       	movw	r24, r20
 828:	81 70       	andi	r24, 0x01	; 1
 82a:	ec 81       	ldd	r30, Y+4	; 0x04
 82c:	fd 81       	ldd	r31, Y+5	; 0x05
 82e:	80 83       	st	Z, r24
 830:	19 c0       	rjmp	.+50     	; 0x864 <__stack+0x5>
				case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin);break;
 832:	e0 e3       	ldi	r30, 0x30	; 48
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	28 2f       	mov	r18, r24
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	8b 81       	ldd	r24, Y+3	; 0x03
 83e:	88 2f       	mov	r24, r24
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	a9 01       	movw	r20, r18
 844:	02 c0       	rjmp	.+4      	; 0x84a <DIO_u8GetPinValue+0x102>
 846:	55 95       	asr	r21
 848:	47 95       	ror	r20
 84a:	8a 95       	dec	r24
 84c:	e2 f7       	brpl	.-8      	; 0x846 <DIO_u8GetPinValue+0xfe>
 84e:	ca 01       	movw	r24, r20
 850:	81 70       	andi	r24, 0x01	; 1
 852:	ec 81       	ldd	r30, Y+4	; 0x04
 854:	fd 81       	ldd	r31, Y+5	; 0x05
 856:	80 83       	st	Z, r24
 858:	05 c0       	rjmp	.+10     	; 0x864 <__stack+0x5>
				default: Local_u8ErrorState = 1;break;
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	89 83       	std	Y+1, r24	; 0x01
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
			}
	 }
	 else
	 {
		 Local_u8ErrorState = 1;
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return Local_u8ErrorState;
 864:	89 81       	ldd	r24, Y+1	; 0x01
 866:	27 96       	adiw	r28, 0x07	; 7
 868:	0f b6       	in	r0, 0x3f	; 63
 86a:	f8 94       	cli
 86c:	de bf       	out	0x3e, r29	; 62
 86e:	0f be       	out	0x3f, r0	; 63
 870:	cd bf       	out	0x3d, r28	; 61
 872:	cf 91       	pop	r28
 874:	df 91       	pop	r29
 876:	08 95       	ret

00000878 <HBRIDGE_voidControl>:
#include "HBRIDGE_private.h"
#include "HBRIDGE_config.h"                                                                                                                                                            #define F_CPU 8000000UL


void HBRIDGE_voidControl(u8 Copy_u8voidCommand)
{
 878:	df 93       	push	r29
 87a:	cf 93       	push	r28
 87c:	00 d0       	rcall	.+0      	; 0x87e <HBRIDGE_voidControl+0x6>
 87e:	0f 92       	push	r0
 880:	cd b7       	in	r28, 0x3d	; 61
 882:	de b7       	in	r29, 0x3e	; 62
 884:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8voidCommand)
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	28 2f       	mov	r18, r24
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	3b 83       	std	Y+3, r19	; 0x03
 88e:	2a 83       	std	Y+2, r18	; 0x02
 890:	8a 81       	ldd	r24, Y+2	; 0x02
 892:	9b 81       	ldd	r25, Y+3	; 0x03
 894:	83 30       	cpi	r24, 0x03	; 3
 896:	91 05       	cpc	r25, r1
 898:	69 f1       	breq	.+90     	; 0x8f4 <HBRIDGE_voidControl+0x7c>
 89a:	2a 81       	ldd	r18, Y+2	; 0x02
 89c:	3b 81       	ldd	r19, Y+3	; 0x03
 89e:	24 30       	cpi	r18, 0x04	; 4
 8a0:	31 05       	cpc	r19, r1
 8a2:	7c f4       	brge	.+30     	; 0x8c2 <HBRIDGE_voidControl+0x4a>
 8a4:	8a 81       	ldd	r24, Y+2	; 0x02
 8a6:	9b 81       	ldd	r25, Y+3	; 0x03
 8a8:	81 30       	cpi	r24, 0x01	; 1
 8aa:	91 05       	cpc	r25, r1
 8ac:	e9 f0       	breq	.+58     	; 0x8e8 <HBRIDGE_voidControl+0x70>
 8ae:	2a 81       	ldd	r18, Y+2	; 0x02
 8b0:	3b 81       	ldd	r19, Y+3	; 0x03
 8b2:	22 30       	cpi	r18, 0x02	; 2
 8b4:	31 05       	cpc	r19, r1
 8b6:	dc f4       	brge	.+54     	; 0x8ee <HBRIDGE_voidControl+0x76>
 8b8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ba:	9b 81       	ldd	r25, Y+3	; 0x03
 8bc:	00 97       	sbiw	r24, 0x00	; 0
 8be:	89 f0       	breq	.+34     	; 0x8e2 <HBRIDGE_voidControl+0x6a>
 8c0:	24 c0       	rjmp	.+72     	; 0x90a <HBRIDGE_voidControl+0x92>
 8c2:	2a 81       	ldd	r18, Y+2	; 0x02
 8c4:	3b 81       	ldd	r19, Y+3	; 0x03
 8c6:	25 30       	cpi	r18, 0x05	; 5
 8c8:	31 05       	cpc	r19, r1
 8ca:	d1 f0       	breq	.+52     	; 0x900 <HBRIDGE_voidControl+0x88>
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	9b 81       	ldd	r25, Y+3	; 0x03
 8d0:	85 30       	cpi	r24, 0x05	; 5
 8d2:	91 05       	cpc	r25, r1
 8d4:	94 f0       	brlt	.+36     	; 0x8fa <HBRIDGE_voidControl+0x82>
 8d6:	2a 81       	ldd	r18, Y+2	; 0x02
 8d8:	3b 81       	ldd	r19, Y+3	; 0x03
 8da:	26 30       	cpi	r18, 0x06	; 6
 8dc:	31 05       	cpc	r19, r1
 8de:	99 f0       	breq	.+38     	; 0x906 <HBRIDGE_voidControl+0x8e>
 8e0:	14 c0       	rjmp	.+40     	; 0x90a <HBRIDGE_voidControl+0x92>
	{
	   case HBRIDGE_BOTH_FORWARD:
		   DCMOTOR_voidClockWise();
 8e2:	0e 94 51 00 	call	0xa2	; 0xa2 <DCMOTOR_voidClockWise>
 8e6:	11 c0       	rjmp	.+34     	; 0x90a <HBRIDGE_voidControl+0x92>
		   break;
	   case HBRIDE_BOTH_BACKWARD:
		   DCMOTOR_voidCounterClockWise();
 8e8:	0e 94 87 00 	call	0x10e	; 0x10e <DCMOTOR_voidCounterClockWise>
 8ec:	0e c0       	rjmp	.+28     	; 0x90a <HBRIDGE_voidControl+0x92>
		   break;
	   case HBRIDGE_BOTH_STOP:
		   DCMOTOR_voidStopMotor();
 8ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <DCMOTOR_voidStopMotor>
 8f2:	0b c0       	rjmp	.+22     	; 0x90a <HBRIDGE_voidControl+0x92>
		   break;
	   case HBRIDGE_RIGHT_FORWARD:
		   DCMOTOR_voidRightClockWise();
 8f4:	0e 94 a2 00 	call	0x144	; 0x144 <DCMOTOR_voidRightClockWise>
 8f8:	08 c0       	rjmp	.+16     	; 0x90a <HBRIDGE_voidControl+0x92>
		   break;
	   case HBRIDGE_RIGHT_BACKWARD:
		   DCMOTOR_voidRightCounterClockWise();
 8fa:	0e 94 bd 00 	call	0x17a	; 0x17a <DCMOTOR_voidRightCounterClockWise>
 8fe:	05 c0       	rjmp	.+10     	; 0x90a <HBRIDGE_voidControl+0x92>
		   break;
	   case HBRIDGE_LEFT_FORWARD:
		   DCMOTOR_voidLeftClockWise();
 900:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMOTOR_voidLeftClockWise>
 904:	02 c0       	rjmp	.+4      	; 0x90a <HBRIDGE_voidControl+0x92>
		   break;
	   case HBRIDGE_LEFT_BACKWARD:
		   DCMOTOR_voidLeftCounterClockWise();
 906:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DCMOTOR_voidLeftCounterClockWise>
		   break;
	}
}
 90a:	0f 90       	pop	r0
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	cf 91       	pop	r28
 912:	df 91       	pop	r29
 914:	08 95       	ret

00000916 <USART_voidInit>:
access this register bit by bit. Therefore, we will declare a
variable and change its bits using BIT_MATH function like macros
then assign this variable to the register.
***/
void USART_voidInit(void)
{   u8 Local_u8UCSRCValue = 0;
 916:	df 93       	push	r29
 918:	cf 93       	push	r28
 91a:	0f 92       	push	r0
 91c:	cd b7       	in	r28, 0x3d	; 61
 91e:	de b7       	in	r29, 0x3e	; 62
 920:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(Local_u8UCSRCValue ,UCSRC_URSEL);   // Use UCSRRC
 922:	89 81       	ldd	r24, Y+1	; 0x01
 924:	80 68       	ori	r24, 0x80	; 128
 926:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue , UCSRC_UCSZ1);
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	84 60       	ori	r24, 0x04	; 4
 92c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue , UCSRC_UCSZ0);
 92e:	89 81       	ldd	r24, Y+1	; 0x01
 930:	82 60       	ori	r24, 0x02	; 2
 932:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = Local_u8UCSRCValue;
 934:	e0 e4       	ldi	r30, 0x40	; 64
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	80 83       	st	Z, r24
	UBRRL= 51;  // Baud Rate = 9600 bit/sec
 93c:	e9 e2       	ldi	r30, 0x29	; 41
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	83 e3       	ldi	r24, 0x33	; 51
 942:	80 83       	st	Z, r24
	SET_BIT(UCSRB , UCSRB_TXEN);    // Transmitter Enable
 944:	aa e2       	ldi	r26, 0x2A	; 42
 946:	b0 e0       	ldi	r27, 0x00	; 0
 948:	ea e2       	ldi	r30, 0x2A	; 42
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
 94e:	88 60       	ori	r24, 0x08	; 8
 950:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_RXEN);    //Receiver Enable
 952:	aa e2       	ldi	r26, 0x2A	; 42
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	ea e2       	ldi	r30, 0x2A	; 42
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	80 61       	ori	r24, 0x10	; 16
 95e:	8c 93       	st	X, r24
}
 960:	0f 90       	pop	r0
 962:	cf 91       	pop	r28
 964:	df 91       	pop	r29
 966:	08 95       	ret

00000968 <USART_voidTransmitData>:
void USART_voidTransmitData(u8 Copy_u8Data)
{
 968:	df 93       	push	r29
 96a:	cf 93       	push	r28
 96c:	0f 92       	push	r0
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
 972:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA , UCSRA_UDRE)== 0); //Polling , Wait until transmit buffer is empty
 974:	eb e2       	ldi	r30, 0x2B	; 43
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	82 95       	swap	r24
 97c:	86 95       	lsr	r24
 97e:	87 70       	andi	r24, 0x07	; 7
 980:	88 2f       	mov	r24, r24
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	81 70       	andi	r24, 0x01	; 1
 986:	90 70       	andi	r25, 0x00	; 0
 988:	00 97       	sbiw	r24, 0x00	; 0
 98a:	a1 f3       	breq	.-24     	; 0x974 <USART_voidTransmitData+0xc>
	UDR = Copy_u8Data;
 98c:	ec e2       	ldi	r30, 0x2C	; 44
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	80 83       	st	Z, r24
}
 994:	0f 90       	pop	r0
 996:	cf 91       	pop	r28
 998:	df 91       	pop	r29
 99a:	08 95       	ret

0000099c <USART_u8ReceiveData>:
u8 USART_u8ReceiveData(void)
{
 99c:	df 93       	push	r29
 99e:	cf 93       	push	r28
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA , UCSRA_RXC)== 0); // Polling 
 9a4:	eb e2       	ldi	r30, 0x2B	; 43
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	88 23       	and	r24, r24
 9ac:	dc f7       	brge	.-10     	; 0x9a4 <USART_u8ReceiveData+0x8>
	return UDR;
 9ae:	ec e2       	ldi	r30, 0x2C	; 44
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
}
 9b4:	cf 91       	pop	r28
 9b6:	df 91       	pop	r29
 9b8:	08 95       	ret

000009ba <main>:
#include "USART_interface.h"
#include "DCMOTOR_interface.h"
#include "HBRIDGE_interface.h"

void main (void)
{
 9ba:	df 93       	push	r29
 9bc:	cf 93       	push	r28
 9be:	0f 92       	push	r0
 9c0:	cd b7       	in	r28, 0x3d	; 61
 9c2:	de b7       	in	r29, 0x3e	; 62
	USART_voidInit();
 9c4:	0e 94 8b 04 	call	0x916	; 0x916 <USART_voidInit>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_INPUT); //RX
 9c8:	83 e0       	ldi	r24, 0x03	; 3
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	40 e0       	ldi	r20, 0x00	; 0
 9ce:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_OUTPUT); //TX
 9d2:	83 e0       	ldi	r24, 0x03	; 3
 9d4:	61 e0       	ldi	r22, 0x01	; 1
 9d6:	41 e0       	ldi	r20, 0x01	; 1
 9d8:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_u8SetPinDirection>
	DCMOTOR_voidInit();
 9dc:	0e 94 36 00 	call	0x6c	; 0x6c <DCMOTOR_voidInit>

   u8 Local_u8ReceivedData;

   while(1)
   {
	   Local_u8ReceivedData = USART_u8ReceiveData();
 9e0:	0e 94 ce 04 	call	0x99c	; 0x99c <USART_u8ReceiveData>
 9e4:	89 83       	std	Y+1, r24	; 0x01


	            if(Local_u8ReceivedData == 'F')       // Move Forward
 9e6:	89 81       	ldd	r24, Y+1	; 0x01
 9e8:	86 34       	cpi	r24, 0x46	; 70
 9ea:	21 f4       	brne	.+8      	; 0x9f4 <main+0x3a>
	      		{
	       	   HBRIDGE_voidControl(HBRIDGE_BOTH_FORWARD);
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	0e 94 3c 04 	call	0x878	; 0x878 <HBRIDGE_voidControl>
 9f2:	f6 cf       	rjmp	.-20     	; 0x9e0 <main+0x26>
	      		}

	      		else if(Local_u8ReceivedData == 'B') // Move Backward
 9f4:	89 81       	ldd	r24, Y+1	; 0x01
 9f6:	82 34       	cpi	r24, 0x42	; 66
 9f8:	21 f4       	brne	.+8      	; 0xa02 <main+0x48>
	      		{
	      			HBRIDGE_voidControl(HBRIDE_BOTH_BACKWARD);
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	0e 94 3c 04 	call	0x878	; 0x878 <HBRIDGE_voidControl>
 a00:	ef cf       	rjmp	.-34     	; 0x9e0 <main+0x26>
	      		}
	      		else if(Local_u8ReceivedData == 'S') // Stop
 a02:	89 81       	ldd	r24, Y+1	; 0x01
 a04:	83 35       	cpi	r24, 0x53	; 83
 a06:	21 f4       	brne	.+8      	; 0xa10 <main+0x56>
	      		{
	      			HBRIDGE_voidControl(HBRIDGE_BOTH_STOP);
 a08:	82 e0       	ldi	r24, 0x02	; 2
 a0a:	0e 94 3c 04 	call	0x878	; 0x878 <HBRIDGE_voidControl>
 a0e:	e8 cf       	rjmp	.-48     	; 0x9e0 <main+0x26>
	      		}
	      		else if(Local_u8ReceivedData == 'I') // Move Right Forward
 a10:	89 81       	ldd	r24, Y+1	; 0x01
 a12:	89 34       	cpi	r24, 0x49	; 73
 a14:	21 f4       	brne	.+8      	; 0xa1e <main+0x64>
	      		{
	      			HBRIDGE_voidControl(HBRIDGE_RIGHT_FORWARD);
 a16:	83 e0       	ldi	r24, 0x03	; 3
 a18:	0e 94 3c 04 	call	0x878	; 0x878 <HBRIDGE_voidControl>
 a1c:	e1 cf       	rjmp	.-62     	; 0x9e0 <main+0x26>
	      		}
	      		else if(Local_u8ReceivedData == 'J') // Move Right Backward
 a1e:	89 81       	ldd	r24, Y+1	; 0x01
 a20:	8a 34       	cpi	r24, 0x4A	; 74
 a22:	21 f4       	brne	.+8      	; 0xa2c <main+0x72>
	      		{
	      			HBRIDGE_voidControl(HBRIDGE_RIGHT_BACKWARD);
 a24:	84 e0       	ldi	r24, 0x04	; 4
 a26:	0e 94 3c 04 	call	0x878	; 0x878 <HBRIDGE_voidControl>
 a2a:	da cf       	rjmp	.-76     	; 0x9e0 <main+0x26>
	      		}
	      		else if(Local_u8ReceivedData == 'G') // Move Left Forward
 a2c:	89 81       	ldd	r24, Y+1	; 0x01
 a2e:	87 34       	cpi	r24, 0x47	; 71
 a30:	21 f4       	brne	.+8      	; 0xa3a <main+0x80>
	      		{
	      			HBRIDGE_voidControl(HBRIDGE_LEFT_FORWARD);
 a32:	85 e0       	ldi	r24, 0x05	; 5
 a34:	0e 94 3c 04 	call	0x878	; 0x878 <HBRIDGE_voidControl>
 a38:	d3 cf       	rjmp	.-90     	; 0x9e0 <main+0x26>
	      		}
	      		else if(Local_u8ReceivedData == 'H') // Move Left Backward
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
 a3c:	88 34       	cpi	r24, 0x48	; 72
 a3e:	81 f6       	brne	.-96     	; 0x9e0 <main+0x26>
	      		{
	      		    HBRIDGE_voidControl(HBRIDGE_LEFT_BACKWARD);
 a40:	86 e0       	ldi	r24, 0x06	; 6
 a42:	0e 94 3c 04 	call	0x878	; 0x878 <HBRIDGE_voidControl>
 a46:	cc cf       	rjmp	.-104    	; 0x9e0 <main+0x26>

00000a48 <_exit>:
 a48:	f8 94       	cli

00000a4a <__stop_program>:
 a4a:	ff cf       	rjmp	.-2      	; 0xa4a <__stop_program>
